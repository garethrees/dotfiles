#!/bin/bash

set -e

function usage {
  this=$(basename "$0");

  cat <<EOF
Usage: $this [-h] [-w <width>] [<command>] <image> [<image>...] <output>

Combine multiple images into a single tiled image.

ARGUMENTS
  <command>: Tiling layout. Defaults to "2up".
  <image>: Images to tile.
  <output>: Output image.

OPTIONS
  -h                  Display this help message.
  -w <width>          Resize input images to the given with in pixels. Defaults
                      to $WIDTH.

COMMANDS
  horizontal    Tile all images horizontally in a single row.
  vertical      Tile all images vertically in a single column.
  2up           Tile images vertically, split across two columns.

EXAMPLES
  Tile foo.jpg and bar.jpg horizontally at 800px width per image to out.jpg.
  $ $this -w 800 horizontal foo.jpg bar.jpg out.jpg

  As above, but convert to PNG on output.
  $ $this -w 800 horizontal foo.jpg bar.jpg out.png

  Tile three images vertically at 600px width per image.
  $ $this -w 600 vertical foo.jpg bar.jpg baz.jpg out.jpg

ERRORS
  1 User misuse.
  2 Fatal error.
EOF
}

function misuse {
  usage;
  exit 1;
}

function __horizontal {
  if [[ "$#" -lt 2 ]]; then
    misuse;
  fi

  montage -auto-orient -geometry "$WIDTH" -tile x1 "$@"
}

function __vertical {
  if [[ "$#" -lt 2 ]]; then
    misuse;
  fi

  montage -auto-orient -geometry "$WIDTH" -tile 1x "$@"
}

function __2up {
  if [[ "$#" -lt 2 ]]; then
    misuse;
  fi

  montage -auto-orient -geometry "$WIDTH" -tile 2x "$@"
}

# Entrypoint
function main {
  if [[ "$#" -lt 2 ]]; then
    misuse;
  fi

  local action=$1;

  # Real work starts here.
  case "$action" in
    'horizontal')
      shift;
      __horizontal "$@" ;;
    'vertical')
      shift;
      __vertical "$@" ;;
    '2up')
      shift;
      __2up "$@" ;;
    *)
      __2up "$@" ;;
  esac
  exit $?
}

WIDTH=800;

while getopts "hw:" opt; do
  case $opt in
    h)
      usage
      exit 0
      ;;
    w)
      WIDTH=$OPTARG;
      [[ ! $WIDTH =~ ^-?[0-9]+$ ]] && {
        echo "Incorrect options provided. Must be an Integer."
        exit 1
      }
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      echo ""
      exit 1
      ;;
    \?)
      echo "Invalid option -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $(($OPTIND - 1))

if ! [[ -x "$(command -v montage)" ]]; then
  echo 'Error: montage is not installed.' >&2
  exit 2
fi

main "$@"
